# core/report_generator.py

import os  # Add this import to use os.path.join()
from utils.logging_setup import setup_logging  # Add this import for logger
logger = setup_logging()  # Initialize the logger

from utils.config_class import Config  # Import Config class

class ReportGenerator:
    def __init__(self, template_dir):
        self.template_dir = template_dir
        self.export_dir = Config.ensure_export_dir()  # Ensure export dir is set correctly
        self.html_template = self._load_template("report_template.html")  # Call the template loader method

    def _load_template(self, template_name):
        try:
            # Correct the path to the template using os.path.join()
            template_path = os.path.join(self.template_dir, template_name)
            with open(template_path, 'r') as file:
                return file.read()
        except Exception as e:
            # Log the error if template loading fails
            logger.error(f"Error loading template: {str(e)}")
            raise  # Re-raise the exception after logging it
            
    def _default_template(self):
        """Return a default template if file not found"""
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <title>{{CANDIDATE_NAME}} - Assessment Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 30px; line-height: 1.6; }
                h1, h2, h3 { color: #2c3e50; }
                table { border-collapse: collapse; width: 100%; margin: 20px 0; }
                table, th, td { border: 1px solid #ddd; }
                th, td { padding: 12px; text-align: left; }
                th { background-color: #f2f2f2; }
                .match-score { font-size: 24px; font-weight: bold; color: #27ae60; }
                .criteria-pass { color: #27ae60; }
                .criteria-fail { color: #e74c3c; }
                .recommendation { padding: 10px; border-radius: 5px; margin: 20px 0; }
                .highly-recommend { background-color: #d5f5e3; }
                .recommend { background-color: #ebf5fb; }
                .consider { background-color: #fef9e7; }
                .not-recommend { background-color: #fdedec; }
            </style>
        </head>
        <body>
            <h1>{{CANDIDATE_NAME}}</h1>
            <h2>Assessment Report | {{TIMESTAMP}}</h2>
            
            <h2>Match Score</h2>
            <div class="match-score">{{MATCH_SCORE}}%</div>
            
            <h2>Candidate Information</h2>
            <table>
                <tr><td>Name</td><td>{{CANDIDATE_NAME}}</td></tr>
                <tr><td>Email</td><td>{{RESUME_EMAIL}}</td></tr>
                <tr><td>Phone</td><td>{{RESUME_PHONE}}</td></tr>
                <tr><td>Experience</td><td>{{YEARS_EXPERIENCE}} years</td></tr>
                <tr><td>Education</td><td>{{EDUCATION}}</td></tr>
                <tr><td>Recent Position</td><td>{{LAST_POSITION}}</td></tr>
            </table>
            
            <h2>Skills Analysis</h2>
            <h3>Matching Skills</h3>
            <p>{{MATCHING_SKILLS}}</p>
            
            <h3>Missing Skills</h3>
            <p>{{MISSING_SKILLS}}</p>
            
            <h2>Requirements Check</h2>
            <p>{{CRITERIA_RESULTS}}</p>
            
            <h2>Hiring Recommendation</h2>
            <div class="recommendation {{RECOMMENDATION_CLASS}}">
                {{RECOMMENDATION}} ({{OVERALL_RATING}}/10)
            </div>
            
            <h3>Strengths</h3>
            <p>{{STRENGTHS}}</p>
            
            <h3>Concerns</h3>
            <p>{{CONCERNS}}</p>
            
            <h3>Suggested Interview Questions</h3>
            <p>{{INTERVIEW_QUESTIONS}}</p>
            
            <footer>
                <p>Generated by AI Recruitment Assistant on {{TIMESTAMP}}</p>
                <p>This report is for informational purposes only and should be used alongside other recruitment tools.</p>
            </footer>
        </body>
        </html>
        """
            
    def generate_html_report(self, detailed_results):
        """Generate HTML report for candidate analysis"""
        if not detailed_results:
            logger.warning("No results to generate HTML report")
            return None
            
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Start with the basic HTML structure
        html_content = """<!DOCTYPE html>
        <html>
        <head>
            <title>Candidate Analysis Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; color: #333; }
                h1, h2, h3 { color: #2c3e50; }
                .report-title { text-align: center; margin-bottom: 30px; }
                .export-btn { background: #4CAF50; color: white; padding: 10px 20px; border: none; 
                              border-radius: 4px; cursor: pointer; margin: 10px 0; }
                .candidate-card { border: 1px solid #ddd; border-radius: 8px; padding: 15px; 
                                 margin: 20px 0; background: #f9f9f9; }
                .metrics-container { display: flex; gap: 20px; margin-bottom: 15px; flex-wrap: wrap; }
                .metric { flex: 1; padding: 10px; background: #fff; border-radius: 6px; 
                         box-shadow: 0 2px 4px rgba(0,0,0,0.1); min-width: 150px; }
                .progress-bar { height: 20px; background: #ecf0f1; border-radius: 10px; overflow: hidden; }
                .progress-fill { height: 100%; background: #3498db; transition: width 0.3s ease; }
                .recommendation { padding: 8px; border-radius: 4px; color: white; font-weight: bold; 
                                 display: inline-block; margin: 10px 0; }
                .high { background: #27ae60; }
                .medium { background: #f1c40f; color: #333; }
                .low { background: #e67e22; }
                .not { background: #e74c3c; }
                .skills-section { margin: 10px 0; }
                .skill-tag { display: inline-block; padding: 4px 8px; margin: 2px; 
                            border-radius: 12px; background: #ecf0f1; }
                .comparison-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                .comparison-table th, .comparison-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                .comparison-table th { background: #f2f2f2; }
                .criteria-result { margin: 2px 0; }
                .criteria-pass { color: #27ae60; }
                .criteria-fail { color: #e74c3c; }
                @media print {
                    .export-btn { display: none; }
                    .candidate-card { page-break-inside: avoid; margin: 15px 0; }
                    @page { margin: 2cm; }
                }
            </style>
        </head>
        <body>
            <h1 class="report-title">Candidate Analysis Report</h1>
            <button class="export-btn" onclick="window.print()">Export to PDF</button>
            
            <div class="candidate-cards">
        """
        
        # Generate HTML for each candidate
        for candidate in detailed_results:
            html_content += self._render_candidate_card(candidate, timestamp)
            
        # Add comparison table
        html_content += self._render_comparison_table(detailed_results)
        
        html_content += """
            </div>
        </body>
        </html>
        """
        
        # Generate filename and save to file
        timestamp_file = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(self.export_dir, f"candidate_report_{timestamp_file}.html")
        
        with open(filename, "w", encoding="utf-8") as f:
            f.write(html_content)
            
        logger.info(f"Generated HTML report: {filename}")
        return filename
        
    def generate_json_report(self, detailed_results):
        """Export results as structured JSON"""
        if not detailed_results:
            logger.warning("No results to generate JSON report")
            return None
            
        # Generate filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(self.export_dir, f"resume_analysis_{timestamp}.json")
        
        # Save to file
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(detailed_results, f, indent=2, default=str)
            
        logger.info(f"Generated JSON report: {filename}")
        return filename
    
    def generate_individual_report(self, candidate_data):
        """Generate an individual HTML report for a single candidate"""
        if not candidate_data or not self.html_template:
            logger.warning("Cannot generate individual report: missing data or template")
            return None
            
        # Get data from candidate
        resume_summary = candidate_data.get("basic_info", {})
        skill_match = candidate_data.get("skill_match", {})
        recommendation = candidate_data.get("recommendation", {})
        criteria_results = candidate_data.get("criteria_results", [])
        
        # Calculate criteria match rate
        criteria_met = sum(1 for result in criteria_results if "✅" in result)
        criteria_total = len(criteria_results)
        criteria_match_rate = (criteria_met / criteria_total * 100) if criteria_total > 0 else 0
        
        # Format criteria results for display
        criteria_html = ""
        for result in criteria_results:
            css_class = "criteria-pass" if "✅" in result else "criteria-fail"
            criteria_html += f'<div class="criteria-result {css_class}">{result}</div>'
            
        # Determine recommendation class
        rec_text = recommendation.get("recommendation", "").lower()
        if "highly recommend" in rec_text:
            rec_class = "high"
        elif "recommend" in rec_text and "not" not in rec_text:
            rec_class = "medium"
        elif "consider" in rec_text:
            rec_class = "low"
        else:
            rec_class = "not"
            
        # Format skills
        matching_skills = ", ".join(skill_match.get("matching_skills", []))
        missing_skills = ", ".join(skill_match.get("missing_skills", []))
        strengths = "<ul>" + "".join([f"<li>{s}</li>" for s in recommendation.get("strengths", [])]) + "</ul>"
        concerns = "<ul>" + "".join([f"<li>{s}</li>" for s in recommendation.get("concerns", [])]) + "</ul>"
        questions = "<ul>" + "".join([f"<li>{q}</li>" for q in recommendation.get("interview_questions", [])]) + "</ul>"
        
        # Replace template variables
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        candidate_name = resume_summary.get("name", "Unknown")
        
        # Create replacement dictionary
        replacements = {
            "{{CANDIDATE_NAME}}": escape(candidate_name),
            "{{TIMESTAMP}}": timestamp,
            "{{MATCH_SCORE}}": str(skill_match.get("match_score", 0)),
            "{{RESUME_EMAIL}}": escape(resume_summary.get("email", "")),
            "{{RESUME_PHONE}}": escape(resume_summary.get("phone", "")),
            "{{YEARS_EXPERIENCE}}": str(resume_summary.get("years_experience", "N/A")),
            "{{EDUCATION}}": escape(resume_summary.get("education", "Not specified")),
            "{{LAST_POSITION}}": escape(resume_summary.get("last_position", "Not specified")),
            "{{MATCHING_SKILLS}}": escape(matching_skills) or "None identified",
            "{{MISSING_SKILLS}}": escape(missing_skills) or "None identified",
            "{{CRITERIA_RESULTS}}": criteria_html,
            "{{RECOMMENDATION}}": escape(recommendation.get("recommendation", "Not available")),
            "{{RECOMMENDATION_CLASS}}": rec_class,
            "{{OVERALL_RATING}}": str(recommendation.get("overall_rating", 0)),
            "{{STRENGTHS}}": strengths,
            "{{CONCERNS}}": concerns,
            "{{INTERVIEW_QUESTIONS}}": questions,
            "{{EXPERIENCE_RELEVANCE}}": str(criteria_match_rate) + "% criteria match"
        }
        
        # Apply all replacements
        report_html = self.html_template
        for key, value in replacements.items():
            report_html = report_html.replace(key, value)
            
        # Save to file
        filename_safe = "".join(c if c.isalnum() else "_" for c in candidate_name)
        timestamp_file = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(self.export_dir, f"{filename_safe}_report_{timestamp_file}.html")
        
        with open(filename, "w", encoding="utf-8") as f:
            f.write(report_html)
            
        logger.info(f"Generated individual report for {candidate_name}: {filename}")
        return filename
        
    def _render_candidate_card(self, candidate, timestamp):
        """Render HTML for a single candidate card"""
        # Extract data
        resume_summary = candidate.get("basic_info", {})
        skill_match = candidate.get("skill_match", {})
        recommendation = candidate.get("recommendation", {})
        criteria_results = candidate.get("criteria_results", [])
        
        # Calculate criteria match rate
        criteria_met = sum(1 for result in criteria_results if "✅" in result)
        criteria_total = len(criteria_results)
        criteria_match_rate = (criteria_met / criteria_total * 100) if criteria_total > 0 else 0
        
        # Determine recommendation class
        rec_text = recommendation.get("recommendation", "").lower()
        if "highly recommend" in rec_text:
            rec_class = "high"
        elif "recommend" in rec_text and "not" not in rec_text:
            rec_class = "medium"
        elif "consider" in rec_text:
            rec_class = "low"
        else:
            rec_class = "not"
            
        # Get candidate info
        name = escape(resume_summary.get("name", "Unknown"))
        filename = escape(candidate.get("filename", ""))
        overall_rating = recommendation.get("overall_rating", 0)
        skills_match = skill_match.get("match_score", 0)
        years_experience = escape(str(resume_summary.get("years_experience", "N/A")))
        recommendation_text = escape(recommendation.get("recommendation", "No recommendation"))
        education = escape(resume_summary.get("education", "Not specified"))
        last_position = escape(resume_summary.get("last_position", "Not specified"))
        
        # Render strengths and concerns
        strengths_html = "<ul>"
        for strength in recommendation.get("strengths", []):
            strengths_html += f"<li>{escape(strength)}</li>"
        strengths_html += "</ul>"
        
        concerns_html = "<ul>"
        for concern in recommendation.get("concerns", []):
            concerns_html += f"<li>{escape(concern)}</li>"
        concerns_html += "</ul>"
        
        # Render matching and missing skills
        matching_skills_html = ""
        for skill in skill_match.get("matching_skills", []):
            matching_skills_html += f"<span class='skill-tag'>{escape(skill)}</span>"
            
        missing_skills_html = ""
        for skill in skill_match.get("missing_skills", []):
            missing_skills_html += f"<span class='skill-tag'>{escape(skill)}</span>"
            
        # Render criteria results
        criteria_html = ""
        for result in criteria_results:
            css_class = "criteria-pass" if "✅" in result else "criteria-fail"
            criteria_html += f'<div class="criteria-result {css_class}">{escape(result)}</div>'
        
        # Build the card HTML
        card_html = f"""
        <div class="candidate-card">
            <div class="card-header">
                <h2>{name}</h2>
                <div>File: {filename}</div>
            </div>
            
            <div class="metrics-container">
                <div class="metric">
                    <h3>Overall Rating</h3>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {overall_rating * 10}%;"></div>
                    </div>
                    <div>{overall_rating}/10</div>
                </div>
                
                <div class="metric">
                    <h3>Skills Match</h3>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {skills_match}%;"></div>
                    </div>
                    <div>{skills_match}%</div>
                </div>
                
                <div class="metric">
                    <h3>Criteria Match</h3>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {criteria_match_rate:.1f}%;"></div>
                    </div>
                    <div>{criteria_match_rate:.1f}%</div>
                </div>
                
                <div class="metric">
                    <h3>Experience</h3>
                    <div class="years-experience">{years_experience} years</div>
                </div>
            </div>
            
            <div class="recommendation {rec_class}">
                {recommendation_text}
            </div>
            
            <div class="strengths-concerns">
                <h3>Strengths</h3>
                {strengths_html}
                
                <h3>Concerns</h3>
                {concerns_html}
            </div>
            
            <div class="skills-section">
                <h3>Matching Skills</h3>
                <div class="skill-match">
                    {matching_skills_html or "<span>None identified</span>"}
                </div>
                
                <h3>Missing Skills</h3>
                <div class="skill-missing">
                    {missing_skills_html or "<span>None identified</span>"}
                </div>
            </div>
            
            <div class="criteria-section">
                <h3>Criteria Results</h3>
                {criteria_html}
            </div>
            
            <div class="education-experience">
                <h3>Education</h3>
                <p>{education}</p>
                
                <h3>Recent Position</h3>
                <p>{last_position}</p>
            </div>
        </div>
        """
        
        return card_html
        
    def _render_comparison_table(self, candidates_data):
        """Render HTML comparison table for all candidates"""
        table_html = """
        <h2>Comparison Table</h2>
        <table class="comparison-table">
            <thead>
                <tr>
                    <th>Candidate</th>
                    <th>Overall Rating</th>
                    <th>Skills Match</th>
                    <th>Criteria Match</th>
                    <th>Experience</th>
                    <th>Recommendation</th>
                </tr>
            </thead>
            <tbody>
        """
        
        for candidate in candidates_data:
            # Extract data
            resume_summary = candidate.get("basic_info", {})
            skill_match = candidate.get("skill_match", {})
            recommendation = candidate.get("recommendation", {})
            criteria_results = candidate.get("criteria_results", [])
            
            # Calculate criteria match rate
            criteria_met = sum(1 for result in criteria_results if "✅" in result)
            criteria_total = len(criteria_results)
            criteria_match_rate = (criteria_met / criteria_total * 100) if criteria_total > 0 else 0
            
            # Determine recommendation class
            rec_text = recommendation.get("recommendation", "").lower()
            if "highly recommend" in rec_text:
                rec_class = "high"
            elif "recommend" in rec_text and "not" not in rec_text:
                rec_class = "medium"
            elif "consider" in rec_text:
                rec_class = "low"
            else:
                rec_class = "not"
                
            # Get candidate info
            name = escape(resume_summary.get("name", "Unknown"))
            overall_rating = recommendation.get("overall_rating", 0)
            skills_match = skill_match.get("match_score", 0)
            years_experience = escape(str(resume_summary.get("years_experience", "N/A")))
            recommendation_text = escape(recommendation.get("recommendation", "No recommendation"))
            
            # Add row to table
            table_html += f"""
            <tr>
                <td>{name}</td>
                <td>{overall_rating}/10</td>
                <td>{skills_match}%</td>
                <td>{criteria_match_rate:.1f}%</td>
                <td>{years_experience}</td>
                <td class="recommendation {rec_class}">{recommendation_text}</td>
            </tr>
            """
            
        table_html += """
            </tbody>
        </table>
        """
        
        return table_html